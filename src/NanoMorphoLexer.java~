// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: NanoMorphoLexer.jflex


@SuppressWarnings("fallthrough")
public class NanoMorphoLexer implements NanoMorpho.Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\2\6\1\10\2\11\1\6\1\12"+
    "\1\11\1\13\1\14\1\6\4\15\4\16\2\17\1\20"+
    "\1\21\4\6\1\0\4\22\1\23\25\22\1\11\1\24"+
    "\1\11\1\6\2\0\1\25\1\26\2\22\1\27\1\30"+
    "\1\22\1\31\1\32\2\22\1\33\1\22\1\34\1\35"+
    "\2\22\1\36\1\37\1\40\1\41\1\42\1\43\3\22"+
    "\1\11\1\6\1\11\1\6\6\0\1\3\44\0\1\22"+
    "\12\0\1\22\4\0\1\22\5\0\27\22\1\0\37\22"+
    "\1\0\u01ca\22\4\0\14\22\16\0\5\22\7\0\1\22"+
    "\1\0\1\22\201\0\5\22\1\0\2\22\2\0\4\22"+
    "\1\0\1\22\6\0\1\22\1\0\3\22\1\0\1\22"+
    "\1\0\24\22\1\0\123\22\1\0\213\22\10\0\246\22"+
    "\1\0\46\22\2\0\1\22\6\0\51\22\107\0\33\22"+
    "\4\0\4\22\55\0\53\22\43\0\2\22\1\0\143\22"+
    "\1\0\1\22\17\0\2\22\7\0\2\22\12\0\3\22"+
    "\2\0\1\22\20\0\1\22\1\0\36\22\35\0\131\22"+
    "\13\0\1\22\30\0\41\22\11\0\2\22\4\0\1\22"+
    "\5\0\26\22\4\0\1\22\11\0\1\22\3\0\1\22"+
    "\27\0\31\22\7\0\13\22\65\0\25\22\1\0\10\22"+
    "\106\0\66\22\3\0\1\22\22\0\1\22\7\0\12\22"+
    "\17\0\20\22\4\0\10\22\2\0\2\22\2\0\26\22"+
    "\1\0\7\22\1\0\1\22\3\0\4\22\3\0\1\22"+
    "\20\0\1\22\15\0\2\22\1\0\3\22\16\0\2\22"+
    "\12\0\1\22\10\0\6\22\4\0\2\22\2\0\26\22"+
    "\1\0\7\22\1\0\2\22\1\0\2\22\1\0\2\22"+
    "\37\0\4\22\1\0\1\22\23\0\3\22\20\0\11\22"+
    "\1\0\3\22\1\0\26\22\1\0\7\22\1\0\2\22"+
    "\1\0\5\22\3\0\1\22\22\0\1\22\17\0\2\22"+
    "\27\0\1\22\13\0\10\22\2\0\2\22\2\0\26\22"+
    "\1\0\7\22\1\0\2\22\1\0\5\22\3\0\1\22"+
    "\36\0\2\22\1\0\3\22\17\0\1\22\21\0\1\22"+
    "\1\0\6\22\3\0\3\22\1\0\4\22\3\0\2\22"+
    "\1\0\1\22\1\0\2\22\3\0\2\22\3\0\3\22"+
    "\3\0\14\22\26\0\1\22\64\0\10\22\1\0\3\22"+
    "\1\0\27\22\1\0\20\22\3\0\1\22\32\0\3\22"+
    "\5\0\2\22\36\0\1\22\4\0\10\22\1\0\3\22"+
    "\1\0\27\22\1\0\12\22\1\0\5\22\3\0\1\22"+
    "\40\0\1\22\1\0\2\22\17\0\2\22\22\0\10\22"+
    "\1\0\3\22\1\0\51\22\2\0\1\22\20\0\1\22"+
    "\5\0\3\22\10\0\3\22\30\0\6\22\5\0\22\22"+
    "\3\0\30\22\1\0\11\22\1\0\1\22\2\0\7\22"+
    "\72\0\60\22\1\0\2\22\14\0\7\22\72\0\2\22"+
    "\1\0\1\22\1\0\5\22\1\0\30\22\1\0\1\22"+
    "\1\0\12\22\1\0\2\22\11\0\1\22\2\0\5\22"+
    "\1\0\1\22\25\0\4\22\40\0\1\22\77\0\10\22"+
    "\1\0\44\22\33\0\5\22\163\0\53\22\24\0\1\22"+
    "\20\0\6\22\4\0\4\22\3\0\1\22\3\0\2\22"+
    "\7\0\3\22\4\0\15\22\14\0\1\22\21\0\46\22"+
    "\1\0\1\22\5\0\1\22\2\0\53\22\1\0\115\22"+
    "\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22"+
    "\2\0\51\22\1\0\4\22\2\0\41\22\1\0\4\22"+
    "\2\0\7\22\1\0\1\22\1\0\4\22\2\0\17\22"+
    "\1\0\71\22\1\0\4\22\2\0\103\22\45\0\20\22"+
    "\20\0\126\22\2\0\6\22\3\0\u016c\22\2\0\21\22"+
    "\1\0\32\22\5\0\113\22\6\0\10\22\7\0\15\22"+
    "\1\0\4\22\16\0\22\22\16\0\22\22\16\0\15\22"+
    "\1\0\3\22\17\0\64\22\43\0\1\22\4\0\1\22"+
    "\103\0\131\22\7\0\5\22\2\0\42\22\1\0\1\22"+
    "\5\0\106\22\12\0\37\22\61\0\36\22\2\0\5\22"+
    "\13\0\54\22\4\0\32\22\66\0\27\22\11\0\65\22"+
    "\122\0\1\22\135\0\57\22\21\0\7\22\67\0\36\22"+
    "\15\0\2\22\12\0\54\22\32\0\44\22\51\0\3\22"+
    "\12\0\44\22\2\0\11\22\7\0\53\22\2\0\3\22"+
    "\51\0\4\22\1\0\6\22\1\0\2\22\3\0\1\22"+
    "\5\0\300\22\100\0\26\22\2\0\6\22\2\0\46\22"+
    "\2\0\6\22\2\0\10\22\1\0\1\22\1\0\1\22"+
    "\1\0\1\22\1\0\37\22\2\0\65\22\1\0\7\22"+
    "\1\0\1\22\3\0\3\22\1\0\7\22\3\0\4\22"+
    "\2\0\6\22\4\0\15\22\5\0\3\22\1\0\7\22"+
    "\53\0\2\3\107\0\1\22\15\0\1\22\20\0\15\22"+
    "\145\0\1\22\4\0\1\22\2\0\12\22\1\0\1\22"+
    "\3\0\5\22\6\0\1\22\1\0\1\22\1\0\1\22"+
    "\1\0\4\22\1\0\13\22\2\0\4\22\5\0\5\22"+
    "\4\0\1\22\64\0\2\22\u017b\0\57\22\1\0\57\22"+
    "\1\0\205\22\6\0\4\22\3\0\2\22\14\0\46\22"+
    "\1\0\1\22\5\0\1\22\2\0\70\22\7\0\1\22"+
    "\20\0\27\22\11\0\7\22\1\0\7\22\1\0\7\22"+
    "\1\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22"+
    "\1\0\7\22\120\0\1\22\325\0\2\22\52\0\5\22"+
    "\5\0\2\22\4\0\126\22\6\0\3\22\1\0\132\22"+
    "\1\0\4\22\5\0\53\22\1\0\136\22\21\0\33\22"+
    "\65\0\306\22\112\0\360\22\20\0\215\22\103\0\56\22"+
    "\2\0\15\22\3\0\20\22\12\0\2\22\24\0\57\22"+
    "\20\0\37\22\2\0\106\22\61\0\11\22\2\0\147\22"+
    "\2\0\65\22\2\0\5\22\60\0\13\22\1\0\3\22"+
    "\1\0\4\22\1\0\27\22\35\0\64\22\16\0\62\22"+
    "\76\0\6\22\3\0\1\22\1\0\2\22\13\0\34\22"+
    "\12\0\27\22\31\0\35\22\7\0\57\22\34\0\1\22"+
    "\20\0\5\22\1\0\12\22\12\0\5\22\1\0\51\22"+
    "\27\0\3\22\1\0\10\22\24\0\27\22\3\0\1\22"+
    "\3\0\62\22\1\0\1\22\3\0\2\22\2\0\5\22"+
    "\2\0\1\22\1\0\1\22\30\0\3\22\2\0\13\22"+
    "\7\0\3\22\14\0\6\22\2\0\6\22\2\0\6\22"+
    "\11\0\7\22\1\0\7\22\1\0\53\22\1\0\14\22"+
    "\10\0\163\22\35\0\244\22\14\0\27\22\4\0\61\22"+
    "\4\0\u0100\44\156\22\2\0\152\22\46\0\7\22\14\0"+
    "\5\22\5\0\1\22\1\0\12\22\1\0\15\22\1\0"+
    "\5\22\1\0\1\22\1\0\2\22\1\0\2\22\1\0"+
    "\154\22\41\0\153\22\22\0\100\22\2\0\66\22\50\0"+
    "\14\22\164\0\5\22\1\0\207\22\44\0\32\22\6\0"+
    "\32\22\13\0\131\22\3\0\6\22\2\0\6\22\2\0"+
    "\6\22\2\0\3\22\43\0\14\22\1\0\32\22\1\0"+
    "\23\22\1\0\2\22\1\0\17\22\2\0\16\22\42\0"+
    "\173\22\205\0\35\22\3\0\61\22\57\0\40\22\15\0"+
    "\24\22\1\0\10\22\6\0\46\22\12\0\36\22\2\0"+
    "\44\22\4\0\10\22\60\0\236\22\22\0\44\22\4\0"+
    "\44\22\4\0\50\22\10\0\64\22\234\0\67\22\11\0"+
    "\26\22\12\0\10\22\230\0\6\22\2\0\1\22\1\0"+
    "\54\22\1\0\2\22\3\0\1\22\2\0\27\22\12\0"+
    "\27\22\11\0\37\22\101\0\23\22\1\0\2\22\12\0"+
    "\26\22\12\0\32\22\106\0\70\22\6\0\2\22\100\0"+
    "\1\22\17\0\4\22\1\0\3\22\1\0\35\22\52\0"+
    "\35\22\3\0\35\22\43\0\10\22\1\0\34\22\33\0"+
    "\66\22\12\0\26\22\12\0\23\22\15\0\22\22\156\0"+
    "\111\22\67\0\63\22\15\0\63\22\15\0\44\22\334\0"+
    "\35\22\12\0\1\22\10\0\26\22\232\0\27\22\14\0"+
    "\65\22\113\0\55\22\40\0\31\22\32\0\44\22\35\0"+
    "\1\22\13\0\43\22\3\0\1\22\14\0\60\22\16\0"+
    "\4\22\25\0\1\22\1\0\1\22\43\0\22\22\1\0"+
    "\31\22\124\0\7\22\1\0\1\22\1\0\4\22\1\0"+
    "\17\22\1\0\12\22\7\0\57\22\46\0\10\22\2\0"+
    "\2\22\2\0\26\22\1\0\7\22\1\0\2\22\1\0"+
    "\5\22\3\0\1\22\22\0\1\22\14\0\5\22\236\0"+
    "\65\22\22\0\4\22\24\0\1\22\40\0\60\22\24\0"+
    "\2\22\1\0\1\22\270\0\57\22\51\0\4\22\44\0"+
    "\60\22\24\0\1\22\73\0\53\22\15\0\1\22\107\0"+
    "\33\22\345\0\54\22\164\0\100\22\37\0\1\22\240\0"+
    "\10\22\2\0\47\22\20\0\1\22\1\0\1\22\34\0"+
    "\1\22\12\0\50\22\7\0\1\22\25\0\1\22\13\0"+
    "\56\22\23\0\1\22\42\0\71\22\7\0\11\22\1\0"+
    "\45\22\21\0\1\22\61\0\36\22\160\0\7\22\1\0"+
    "\2\22\1\0\46\22\25\0\1\22\31\0\6\22\1\0"+
    "\2\22\1\0\40\22\16\0\1\22\u0147\0\23\22\15\0"+
    "\232\22\346\0\304\22\274\0\57\22\321\0\107\22\271\0"+
    "\71\22\7\0\37\22\161\0\36\22\22\0\60\22\20\0"+
    "\4\22\37\0\25\22\5\0\23\22\260\0\100\22\200\0"+
    "\113\22\5\0\1\22\102\0\15\22\100\0\2\22\1\0"+
    "\1\22\34\0\370\22\10\0\363\22\15\0\37\22\61\0"+
    "\3\22\21\0\4\22\10\0\u018c\22\4\0\153\22\5\0"+
    "\15\22\3\0\11\22\7\0\12\22\146\0\125\22\1\0"+
    "\107\22\1\0\2\22\2\0\1\22\2\0\2\22\2\0"+
    "\4\22\1\0\14\22\1\0\1\22\1\0\7\22\1\0"+
    "\101\22\1\0\4\22\2\0\10\22\1\0\7\22\1\0"+
    "\34\22\1\0\4\22\1\0\5\22\1\0\1\22\3\0"+
    "\7\22\1\0\u0154\22\2\0\31\22\1\0\31\22\1\0"+
    "\37\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0"+
    "\37\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0"+
    "\10\22\64\0\55\22\12\0\7\22\20\0\1\22\u0171\0"+
    "\54\22\24\0\305\22\73\0\104\22\7\0\1\22\264\0"+
    "\4\22\1\0\33\22\1\0\2\22\1\0\1\22\2\0"+
    "\1\22\1\0\12\22\1\0\4\22\1\0\1\22\1\0"+
    "\1\22\6\0\1\22\4\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\3\22\1\0\2\22\1\0\1\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\2\22\1\0\1\22\2\0\4\22\1\0"+
    "\7\22\1\0\4\22\1\0\4\22\1\0\1\22\1\0"+
    "\12\22\1\0\21\22\5\0\3\22\1\0\5\22\1\0"+
    "\21\22\104\0\327\22\51\0\65\22\13\0\336\22\2\0"+
    "\u0182\22\16\0\u0131\22\37\0\36\22\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\5\10\3\1\0\1\6\5\0\4\3\1\7\4\3"+
    "\2\0\1\6\1\0\2\3\1\10\1\11\2\3\1\12"+
    "\1\3\1\0\2\13\1\14\1\6\1\3\1\0\1\6"+
    "\1\15\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\112\0\157\0\224\0\45\0\112"+
    "\0\271\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc"+
    "\0\u01e1\0\u0206\0\157\0\45\0\u022b\0\u0250\0\u0275\0\u029a"+
    "\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0103\0\u0378\0\u039d"+
    "\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5"+
    "\0\u0103\0\u0103\0\u04ea\0\u050f\0\u0103\0\u0534\0\u0559\0\45"+
    "\0\u057e\0\u0103\0\u0103\0\u05a3\0\u05c8\0\u05c8\0\45\0\u0103";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\2\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\10\1\7\3\11\1\10\1\12\2\13\1\2"+
    "\2\13\1\14\1\15\1\13\1\16\1\13\1\17\3\13"+
    "\1\20\1\13\1\21\1\22\54\0\1\4\3\0\2\4"+
    "\4\0\1\4\24\0\7\23\1\24\14\23\1\25\20\23"+
    "\10\26\1\0\13\26\1\27\20\26\14\0\1\30\3\11"+
    "\2\0\2\13\1\0\17\13\22\0\1\31\40\0\3\13"+
    "\2\0\2\13\1\0\17\13\16\0\3\13\2\0\2\13"+
    "\1\0\6\13\1\32\10\13\16\0\3\13\2\0\2\13"+
    "\1\0\1\33\7\13\1\34\3\13\1\35\2\13\16\0"+
    "\3\13\2\0\2\13\1\0\3\13\1\36\13\13\16\0"+
    "\3\13\2\0\2\13\1\0\14\13\1\37\2\13\16\0"+
    "\3\13\2\0\2\13\1\0\11\13\1\40\5\13\16\0"+
    "\3\13\2\0\2\13\1\0\1\41\16\13\16\0\3\13"+
    "\2\0\2\13\1\0\4\13\1\42\12\13\10\0\2\23"+
    "\4\0\2\23\5\0\1\23\1\0\1\23\1\0\1\23"+
    "\3\0\1\23\1\0\1\23\1\0\1\23\14\0\1\24"+
    "\43\0\2\26\4\0\1\43\1\44\5\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\21\0\3\45\46\0\1\46\40\0\3\13\2\0"+
    "\2\13\1\0\12\13\1\47\4\13\16\0\3\13\2\0"+
    "\2\13\1\0\6\13\1\50\10\13\16\0\3\13\2\0"+
    "\2\13\1\0\11\13\1\51\5\13\16\0\3\13\2\0"+
    "\2\13\1\0\7\13\1\52\7\13\16\0\3\13\2\0"+
    "\2\13\1\0\6\13\1\53\10\13\16\0\3\13\2\0"+
    "\2\13\1\0\14\13\1\54\2\13\16\0\3\13\2\0"+
    "\2\13\1\0\11\13\1\55\5\13\16\0\3\13\2\0"+
    "\2\13\1\0\5\13\1\56\11\13\11\0\1\24\4\0"+
    "\2\44\36\0\1\24\4\0\2\26\43\0\3\45\3\0"+
    "\1\57\3\0\1\57\15\0\2\46\3\60\1\61\36\46"+
    "\16\0\3\13\2\0\2\13\1\0\2\13\1\62\14\13"+
    "\16\0\3\13\2\0\2\13\1\0\12\13\1\54\4\13"+
    "\16\0\3\13\2\0\2\13\1\0\6\13\1\63\10\13"+
    "\16\0\3\13\2\0\2\13\1\0\2\13\1\63\14\13"+
    "\16\0\3\13\2\0\2\13\1\0\6\13\1\64\10\13"+
    "\13\0\2\65\1\0\3\66\27\0\1\67\57\0\3\13"+
    "\2\0\2\13\1\0\2\13\1\70\14\13\16\0\3\66"+
    "\25\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1517];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\13\1\1\0\1\11\5\0"+
    "\11\1\2\0\1\1\1\0\10\1\1\0\1\11\4\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	String yylval;

	public String getLVal()
	{
		return yylval;
	}

	public void yyerror( String error )
	{
		System.err.println("Error:  "+error);
		System.err.println("Lexeme: "+yylval);
		System.err.println("Line:   "+(yyline+1));
		System.err.println("Column: "+(yycolumn+1));
		System.exit(1);
	}

	public void show( String token, String lexeme )
	{
		System.out.print("Token: "+token);
		System.out.print(", Lexeme: "+lexeme);
		System.out.print(", Line: "+(yyline+1));
		System.out.println(", Column: "+(yycolumn+1));
	}

	public String getTokenName( int token )
	{
		switch( token )
		{
		case LITERAL:	return "LITERAL";
		case NAME:		return "NAME";
		case IF:		return "IF";
		case ELSE:		return "ELSE";
		case YYERRCODE:	return "YYERRCODE";
		case DELIM:		return "DELIM";
		case QUOTE:	return "QUOTE";
		case WHILE:	return "WHILE";
		case FOR:	return "FOR";
		case VAR:    return "VAR";
		case FUN:	 return "FUN";
		}
		return "unknown";
	}
	
	public int getLine() { return yyline+1; }
	public int getColumn() { return yycolumn+1; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NanoMorphoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yylval = yytext();
	return YYERRCODE;
            }
          // fall through
          case 15: break;
          case 2:
            { 
            }
          // fall through
          case 16: break;
          case 3:
            { yylval = yytext();
	return NAME;
            }
          // fall through
          case 17: break;
          case 4:
            { yylval = yytext();
	return QUOTE;
            }
          // fall through
          case 18: break;
          case 5:
            { yylval = yytext();
	return DELIM;
            }
          // fall through
          case 19: break;
          case 6:
            { yylval = yytext();
	return LITERAL;
            }
          // fall through
          case 20: break;
          case 7:
            { yylval = yytext();
	return IF;
            }
          // fall through
          case 21: break;
          case 8:
            { yylval = yytext();
	return FOR;
            }
          // fall through
          case 22: break;
          case 9:
            { yylval = yytext();
	return FUN;
            }
          // fall through
          case 23: break;
          case 10:
            { yylval = yytext();
    return VAR;
            }
          // fall through
          case 24: break;
          case 11:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { 
            }
          // fall through
          case 25: break;
          case 12:
            { yylval = yytext();
	return ELSE;
            }
          // fall through
          case 26: break;
          case 13:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { 
            }
          // fall through
          case 27: break;
          case 14:
            { yylval = yytext();
	return WHILE;
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
