var a = 15.0;
var t = turtle();
var d = 0.0005;
var ratio = 1.01;
while( t.x*t.x+t.y*t.y < 1.0 )
{
    t.forward(d);                   ;;; forward and draw a line
    sleep(0.001);                   ;;; wait
    t.turn(a);                      ;;; turn a degrees to left
    sleep(0.001);                   ;;; wait
    d = d*ratio;                    ;;; increase step length by fixed ratio
};

startTask(
    fun()
    {
        var i;
        for( i=0 ; i!=10 ; i=inc(i) )
        {
            sleep(1.0);
            writeln(i);
        };
    }
);

rec fun map(f,x)
{
	if( x==[] )
	{
		;;; The result from mapping a function on the empty list is,
		;;; of course, the empty list.
		return [];
	}
	else if(x==0)
	{
		;;; The head of the result is the result from applying
		;;; the argument function to the head of the argument list.
		;;; The tail of the result is the result from mapping the
		;;; argument function to the tail of the argument list.
		return []
	}
	else
	{
		return head(x)
	}
};
;;; Compute the squares of a list two ways.
val f = fun(x) {x*x;};
val x = [1,2,3,4];
writeln(map(f,x));
writeln(map(fun(x){x*x;},[1,2,3,4]));


